{"version":3,"file":"static/js/985.68429fce.chunk.js","mappings":"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","sources":["hook/useDocument.ts","constants/api.ts","views/supplier/SupplierDetailModal.tsx","components/CustomEmptyState.tsx","components/Skeleton/skeleton-table.tsx","views/supplier/SupplierDataTable.tsx","views/supplier/index.tsx"],"sourcesContent":["export const useDocument = (title: string) => {\n  document.title = title;\n};\n","const HOST = 'http://54.199.68.197:8081'\nexport const SUPPLIER_API = HOST + '/api/v1/suppliers'","import {\n  Form,\n  FormLayout,\n  Modal,\n  TextField,\n} from \"@shopify/polaris\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { SUPPLIER_API } from \"../../constants/api\";\nimport { Supplier } from \"../../interface\";\n\ninterface SupplierDetailModalProps {\n  active: boolean;\n  onDismiss: () => void;\n  supplier: Supplier | undefined;\n  setSupplier: React.Dispatch<React.SetStateAction<Supplier | undefined>>;\n  loading: boolean;\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  fetchSuppliers: () => Promise<void>;\n}\n\nconst SupplierDetailModal = ({\n  active,\n  onDismiss,\n  supplier,\n  setSupplier,\n  loading,\n  fetchSuppliers\n}: SupplierDetailModalProps) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n  const [phoneNumber, setPhoneNumber] = useState<string>('');\n  const [note, setNote] = useState<string>('');\n  const [address, setAddress] = useState<string>('');\n  const [nameError, setNameError] = useState<string>('');\n  const [emailError, setEmailError] = useState<string>('');\n  const [phoneNumberError, setPhoneNumberError] = useState<\n    string\n  >('');\n  const [addressError, setAddressError] = useState<string>('');\n\n  const onChangeName = (value: string) => setName(value);\n  const onChangeEmail = (value: string) => setEmail(value);\n  const onChangePhoneNumber = (value: string) => setPhoneNumber(value);\n  const onChangeNotes = (value: string) => setNote(value);\n  const onChangeAddress = (value: string) => setAddress(value);\n\n  const onClearName = () => setName('');\n  const onClearEmail = () => setEmail('');\n  const onClearPhoneNumber = () => setPhoneNumber('');\n  const onClearNotes = () => setNote('');\n  const onClearAddress = () => setAddress('');\n\n  const resetForm = () => {\n    setSupplier(undefined)\n    setName('');\n    setEmail('');\n    setPhoneNumber('');\n    setNote('');\n    setAddress('');\n    setNameError('');\n    setEmailError('');\n    setPhoneNumberError('');\n    setAddressError('');\n  };\n\n  const onCancel = () => {\n    resetForm();\n    onDismiss();\n  };\n\n  function validateEmail(email: string) {\n    var re = /\\S+@\\S+\\.\\S+/;\n    return re.test(email);\n  }\n\n  const checkFormBeforeSubmit = () => {\n    let isValid = true\n\n    if (!name || name.trim() === '') {\n      isValid = false\n      setNameError(\"Vui lòng điền tên\");\n    }\n    else {\n      setNameError('')\n    }\n\n    if (!phoneNumber || phoneNumber.trim() === '') {\n      isValid = false\n      setPhoneNumberError(\"Vui lòng điền số điện thoại\");\n    }\n    else {\n      setPhoneNumberError('')\n    }\n\n    if (!address || address.trim() === '') {\n      isValid = false\n      setAddressError(\"Vui lòng điền địa chỉ\");\n    }\n    else {\n      setAddressError('')\n    }\n\n    if (!email || email.trim() === '') {\n      isValid = false\n      setEmailError(\"Vui lòng điền email\");\n    }\n    else if (!validateEmail(email)) {\n      isValid = false\n      setEmailError(\"Email không đúng định dạng\");\n    }\n    else {\n      setEmailError('')\n    }\n\n    return isValid;\n  }\n\n  const onSubmit = async () => {\n    if (!checkFormBeforeSubmit()) {\n      return;\n    }\n\n    const _supplier = {\n      name,\n      email,\n      phoneNumber,\n      address,\n      note,\n    };\n\n    const response = supplier ? await axios.put(`${SUPPLIER_API}/${supplier.id}`, _supplier) : await axios.post(SUPPLIER_API, _supplier);\n    if (response.status === 200) {\n      await fetchSuppliers()      \n      onDismiss();\n      resetForm();\n    } else {\n      console.log(response);\n    }\n  };\n\n  useEffect(() => {\n    setName(supplier?.name || '');\n    setEmail(supplier?.email || '');\n    setAddress(supplier?.address || '');\n    setPhoneNumber(supplier?.phoneNumber || '');\n    setNote(supplier?.note || '');\n  }, [supplier])\n\n  return (\n    <Modal\n      loading={loading}\n      instant\n      open={active}\n      onClose={onCancel}\n      title={supplier ? \"Thông tin nhà cung cấp\" : \"Thêm nhà cung cấp\"}\n      primaryAction={{\n        content: supplier ? \"Cập nhật\" : \"Thêm\",\n        onAction: onSubmit,\n        id: 'supplier--modal--submit',\n        \n      }}\n      secondaryActions={[\n        {\n          content: \"Huỷ\",\n          onAction: onCancel,\n          id: 'supplier--modal--cancel',\n        },\n      ]}\n    >\n      <Modal.Section>\n        <Form onSubmit={onSubmit}>\n          <FormLayout>\n            <TextField\n              clearButton\n              onClearButtonClick={onClearName}\n              inputMode=\"text\"\n              requiredIndicator\n              label=\"Tên nhà cung cấp\"\n              type=\"text\"\n              value={name}\n              onChange={onChangeName}\n              autoComplete=\"off\"\n              error={nameError}\n            />\n            <TextField\n              placeholder=\"me@example.com\"\n              clearButton\n              onClearButtonClick={onClearEmail}\n              inputMode=\"email\"\n              requiredIndicator\n              label=\"Email\"\n              type=\"email\"\n              value={email}\n              onChange={onChangeEmail}\n              autoComplete=\"off\"\n              error={emailError}\n            />\n            <TextField\n              clearButton\n              onClearButtonClick={onClearPhoneNumber}\n              inputMode=\"tel\"\n              requiredIndicator\n              label=\"Số điện thoại\"\n              type=\"tel\"\n              value={phoneNumber}\n              onChange={onChangePhoneNumber}\n              autoComplete=\"off\"\n              error={phoneNumberError}\n            />\n            <TextField\n              clearButton\n              onClearButtonClick={onClearAddress}\n              inputMode=\"text\"\n              requiredIndicator\n              label=\"Địa chỉ\"\n              type=\"text\"\n              value={address}\n              onChange={onChangeAddress}\n              autoComplete=\"off\"\n              error={addressError}\n            />\n            <TextField\n              clearButton\n              onClearButtonClick={onClearNotes}\n              showCharacterCount\n              inputMode=\"text\"\n              label=\"Ghi chú\"\n              type=\"text\"\n              value={note}\n              onChange={onChangeNotes}\n              autoComplete=\"off\"\n              maxLength={500}\n              multiline={5}\n            />\n          </FormLayout>\n        </Form>\n      </Modal.Section>\n    </Modal>\n  );\n};\n\nexport default SupplierDetailModal;\n","import {LegacyCard, EmptyState} from '@shopify/polaris';\nimport React from 'react';\n\nfunction CustomEmptyState() {\n  return (\n    <LegacyCard sectioned>\n      <EmptyState\n        heading=\"Manage your inventory transfers\"\n        action={{content: 'Add transfer'}}\n        secondaryAction={{\n          content: 'Learn more',\n          url: 'https://help.shopify.com',\n        }}\n        image=\"https://cdn.shopify.com/s/files/1/0262/4071/2726/files/emptystate-files.png\"\n      >\n        <p>Track and receive your incoming inventory from suppliers.</p>\n      </EmptyState>\n    </LegacyCard>\n  );\n}\n\nexport default CustomEmptyState;","import {\n  Box,\n  Card,\n  Divider,\n  InlineStack,\n  Layout,\n  SkeletonBodyText,\n  SkeletonTabs,\n  SkeletonThumbnail,\n  Spinner,\n  Text,\n  BlockStack,\n  useBreakpoints,\n  IndexTable,\n} from \"@shopify/polaris\";\n\nconst LoadingComponentOnIndexTableSkeleton = () => {\n  return (\n    <Box paddingInlineStart=\"500\" paddingBlockStart=\"300\" paddingBlockEnd=\"300\">\n      <InlineStack blockAlign=\"center\">\n        <div style={{ width: \"20px\", height: \"20px\" }}>\n          <Spinner size=\"small\" />\n        </div>\n        <Box paddingInlineStart=\"500\">\n          <Text as=\"p\" tone=\"subdued\">\n            Loading data...\n          </Text>\n        </Box>\n      </InlineStack>\n    </Box>\n  );\n};\n\nexport const SkeletonOnlyTable = ({ number }: { number: number }) => {\n  const { mdDown } = useBreakpoints();\n\n  return (\n    <>\n      <LoadingComponentOnIndexTableSkeleton />\n      {[1, 2, 3, 4].map((item) => {\n        return mdDown ? (\n          <SkeletonRowMobile key={item} />\n        ) : (\n          <SkeletonRowDesktop key={item} column={number} />\n        );\n      })}\n    </>\n  );\n};\n\nexport function SkeletonTableMedia() {\n  return (\n    <Box padding=\"400\">\n      <BlockStack gap=\"400\">\n        {[1, 2, 3, 4].map((i) => (\n          <InlineStack key={i} wrap={false} gap=\"400\">\n            <Box width=\"20px\">\n              <SkeletonBodyText lines={1} />\n            </Box>\n            <Box width=\"100px\">\n              <SkeletonThumbnail size=\"large\" />\n            </Box>\n            <Box width=\"100%\">\n              <SkeletonBodyText />\n            </Box>\n            <Box width=\"100px\">\n              <SkeletonBodyText lines={1} />\n            </Box>\n            <Box width=\"100px\">\n              <SkeletonBodyText lines={1} />\n            </Box>\n          </InlineStack>\n        ))}\n      </BlockStack>\n    </Box>\n  );\n}\n\nconst SkeletonIndexTable = ({ number }: { number: number }) => {\n  const { mdDown } = useBreakpoints();\n  return (\n    <Layout>\n      <Layout.Section>\n        <Card padding={\"0\"}>\n          <SkeletonTabs count={4} />\n          {mdDown ? <Divider borderColor=\"border-secondary\" /> : null}\n          <LoadingComponentOnIndexTableSkeleton />\n          <Divider borderColor=\"border-secondary\" />\n          {[0, 1, 2, 3].map((item) => {\n            return mdDown ? (\n              <SkeletonRowMobile key={item} />\n            ) : (\n              <SkeletonRowDesktop key={item} column={number} />\n            );\n          })}\n        </Card>\n      </Layout.Section>\n    </Layout>\n  );\n};\n\nexport const SkeletonRowTableContent = ({ row, column }: { row: number, column: number }) => {\n  return (\n    <>\n      {Array.from(Array(row).keys()).map((item) => {\n        return (\n          <IndexTable.Row position={item} id={item.toString()} key={item}>\n            {Array.from(Array(column).keys()).map((item, index) => (\n              <IndexTable.Cell key={index}>\n                <SkeletonBodyText key={index} lines={1} />\n              </IndexTable.Cell>\n            ))}\n          </IndexTable.Row>\n        );\n      })}\n    </>\n  );\n};\n\nconst SkeletonRowDesktop = ({ column }: { column: number }) => {\n  return (\n    <Box padding=\"300\" borderBlockEndWidth=\"025\" borderColor=\"border-secondary\">\n      <InlineStack wrap={false} blockAlign=\"center\" gap=\"500\">\n        <Box>\n          <SkeletonThumbnail size=\"extraSmall\" />\n        </Box>\n        {Array.from(Array(column).keys()).map((item, index) => (\n          <SkeletonBodyText key={index} lines={1} />\n        ))}\n      </InlineStack>\n    </Box>\n  );\n};\n\nconst SkeletonRowMobile = () => {\n  return (\n    <Box padding=\"400\" borderBlockEndWidth=\"025\" borderColor=\"border-secondary\">\n      <Box width={\"150px\"} paddingBlockEnd=\"300\">\n        <SkeletonBodyText lines={1} />\n      </Box>\n      <SkeletonBodyText lines={3} />\n    </Box>\n  );\n};\n\nexport default SkeletonIndexTable;\n","import {\n  IndexTable,\n  LegacyCard,\n  useIndexResourceState,\n  Text,\n  Box,\n} from \"@shopify/polaris\";\nimport { DeleteIcon } from \"@shopify/polaris-icons\";\nimport React from \"react\";\nimport { Supplier } from \"../../interface\";\nimport CustomEmptyState from \"../../components/CustomEmptyState\";\nimport { SkeletonRowTableContent } from \"../../components/Skeleton/skeleton-table\";\nimport axios from \"axios\";\nimport { SUPPLIER_API } from \"../../constants/api\";\n\ninterface SupplierDataTableProps {\n  suppliers: Supplier[];\n  setSuppliers: React.Dispatch<React.SetStateAction<Supplier[]>>;\n  loading: boolean;\n  setLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  pageIndex: number;\n  setPageIndex: React.Dispatch<React.SetStateAction<number>>;\n  pageSize?: number;\n  setPageSize?: React.Dispatch<React.SetStateAction<number>>;\n  pagesNumber: number;\n  setPagesNumber?: React.Dispatch<React.SetStateAction<number>>;\n  fetchSuppliers: () => Promise<void>;\n  onViewSupplier: (id: number) => void;\n}\n\nfunction SupplierDataTable(props: SupplierDataTableProps) {\n  const { suppliers, loading, setLoading, pageIndex, setPageIndex, pagesNumber, fetchSuppliers, onViewSupplier} = props;\n  const resourceName = {\n    singular: \"supplier\",\n    plural: \"suppliers\",\n  };\n\n  const { selectedResources, allResourcesSelected, handleSelectionChange, removeSelectedResources } =\n    useIndexResourceState(suppliers);\n\n\n  const rowMarkup = suppliers.map(\n    ({ id, name, address, email, phoneNumber, createdAt }, index) => (\n      <IndexTable.Row\n        onClick={() => onViewSupplier(id)}\n        id={id.toString()}\n        key={id.toString()}\n        selected={selectedResources.includes(id.toString())}\n        position={index}\n      >\n        <IndexTable.Cell className=\"supplier--table--name-column\">\n          <Text truncate breakWord variant=\"bodyMd\" fontWeight=\"bold\" as=\"p\">\n            {name}\n          </Text>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{email}</IndexTable.Cell>\n        <IndexTable.Cell>\n          <Box paddingInlineEnd={\"400\"}>\n            <Text as=\"span\" alignment=\"end\" numeric>\n              {phoneNumber}\n            </Text>\n          </Box>\n        </IndexTable.Cell>\n        <IndexTable.Cell>{address}</IndexTable.Cell>\n      </IndexTable.Row>\n    )\n  );\n\n  const onDeleteRows = async () => {\n    setLoading(true)\n\n    await Promise.all([\n      selectedResources.map(id => +id).forEach(id => {\n        axios.delete(`${SUPPLIER_API}/${id}`)\n      })\n    ])\n\n    await fetchSuppliers()\n    removeSelectedResources(selectedResources)\n    setLoading(false)\n  }\n\n  const bulkActions = [\n    {\n      icon: DeleteIcon,\n      destructive: true,\n      content: \"Delete customers\",\n      onAction: onDeleteRows,\n    },\n  ];\n\n  if (!loading && suppliers.length === 0) return <CustomEmptyState />;\n\n  return (\n    <Box paddingBlockEnd=\"400\">\n      <LegacyCard>\n        <IndexTable\n          resourceName={resourceName}\n          itemCount={suppliers?.length}\n          selectedItemsCount={\n            allResourcesSelected ? \"All\" : selectedResources.length\n          }\n          bulkActions={bulkActions}\n          onSelectionChange={handleSelectionChange}\n          headings={[\n            { title: \"Nhà cung cấp\" },\n            { title: \"Email\" },\n            {\n              title: \"Số điện thoại\",\n              alignment: \"end\",\n              paddingBlockEnd: \"400\",\n            },\n            { title: \"Địa chỉ\" },\n          ]}\n          pagination={{\n            hasNext: pageIndex < pagesNumber - 1,\n            onNext: () => setPageIndex(pageIndex + 1),\n            hasPrevious: pageIndex > 0,\n            onPrevious: () => setPageIndex(pageIndex - 1),\n          }}\n        >\n          {loading ? <SkeletonRowTableContent row={10} column={4}/> : rowMarkup}\n        </IndexTable>\n      </LegacyCard>\n    </Box>\n  );\n}\n\nexport default SupplierDataTable;\n","import { Page } from \"@shopify/polaris\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport SupplierDetailModal from \"./SupplierDetailModal\";\nimport SupplierDataTable from \"./SupplierDataTable\";\nimport axios from \"axios\";\nimport { SUPPLIER_API } from \"../../constants/api\";\nimport { Supplier } from \"../../interface\";\nimport SkeletonIndexTable from \"../../components/Skeleton/skeleton-table\";\nimport { useDocument } from \"../../hook/useDocument\";\n\nconst SupplierPage = () => {\n  const [initTable, setInitTable] = useState(true);\n  const [loading, setLoading] = useState(true);\n  const [isActiveAddModal, setIsActiveAddModal] = useState(false);\n  const [suppliers, setSuppliers] = useState<any[]>([]);\n  const [pageIndex, setPageIndex] = useState(0);\n  const [pageSize] = useState(10);\n  const [pagesNumber, setPagesNumber] = useState(0);\n  const [supplierData, setSupplierData] = useState<Supplier | undefined>();\n  const [loadingModal, setLoadingModal] = useState(false);\n\n  const onDismissAddModal = () => setIsActiveAddModal(false);\n  const onOpenAddModal = () => setIsActiveAddModal(true);\n\n  useDocument(\"Quản lý nhà cung cấp\");\n\n  const fetchSuppliers = useCallback(async () => {\n    await axios\n      .get(`${SUPPLIER_API}?page=${pageIndex}&size=${pageSize}`)\n      .then((response) => response.data)\n      .then((response) => response.data)\n      .then((response) => {\n        console.log(response);\n        const metadata = response.metadata;\n        setPagesNumber(metadata.totalPages);\n        setSuppliers(response.data);\n        if (pageIndex > metadata.totalPages - 1) {\n          setPageIndex(metadata.totalPages - 1);\n        } else setPageIndex(metadata.page);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, [pageIndex, pageSize]);\n\n  const onViewSupplier = async (id: number) => {\n    setLoadingModal(true);\n    onOpenAddModal();\n    const response = await axios.get(`${SUPPLIER_API}/${id}`);\n    const data = response.data;\n    if (data.status === 200) {\n      setSupplierData(data.data);\n      setLoadingModal(false);\n    }\n  };\n\n  useEffect(() => {\n    console.log(\"render\");\n    setLoading(true);\n    fetchSuppliers().then(() => {\n      setLoading(false);\n      setInitTable(false);\n    });\n  }, [pageIndex, pageSize, initTable, fetchSuppliers]);\n\n  return (\n    <Page\n      backAction={{ content: \"supplier_back\", url: \"/\" }}\n      title=\"Quản lý nhà cung cấp\"\n      primaryAction={{\n        content: \"Thêm nhà cung cấp\",\n        onAction: () => setIsActiveAddModal(true),\n      }}\n      fullWidth\n    >\n      {initTable ? (\n        <SkeletonIndexTable number={4} />\n      ) : (\n        <>\n          <SupplierDataTable\n            suppliers={suppliers}\n            setSuppliers={setSuppliers}\n            pageIndex={pageIndex}\n            pagesNumber={pagesNumber}\n            setPageIndex={setPageIndex}\n            loading={loading}\n            setLoading={setLoading}\n            fetchSuppliers={fetchSuppliers}\n            onViewSupplier={onViewSupplier}\n          />\n          <SupplierDetailModal\n            loading={loadingModal}\n            setLoading={setLoadingModal}\n            active={isActiveAddModal}\n            onDismiss={onDismissAddModal}\n            supplier={supplierData}\n            setSupplier={setSupplierData}\n            fetchSuppliers={fetchSuppliers}\n          />\n        </>\n      )}\n    </Page>\n  );\n};\n\nexport default SupplierPage;\n"],"names":["useDocument","title","document","SUPPLIER_API","HOST","_ref","active","onDismiss","supplier","setSupplier","loading","fetchSuppliers","name","setName","useState","email","setEmail","phoneNumber","setPhoneNumber","note","setNote","address","setAddress","nameError","setNameError","emailError","setEmailError","phoneNumberError","setPhoneNumberError","addressError","setAddressError","resetForm","undefined","onCancel","onSubmit","async","checkFormBeforeSubmit","isValid","trim","test","validateEmail","_supplier","response","axios","put","concat","id","post","status","console","log","useEffect","_jsx","Modal","instant","open","onClose","primaryAction","content","onAction","secondaryActions","children","Section","Form","_jsxs","FormLayout","TextField","clearButton","onClearButtonClick","onClearName","inputMode","requiredIndicator","label","type","value","onChange","autoComplete","error","placeholder","onClearEmail","onClearPhoneNumber","onClearAddress","onClearNotes","showCharacterCount","maxLength","multiline","LegacyCard","sectioned","EmptyState","heading","action","secondaryAction","url","image","LoadingComponentOnIndexTableSkeleton","Box","paddingInlineStart","paddingBlockStart","paddingBlockEnd","InlineStack","blockAlign","style","width","height","Spinner","size","Text","as","tone","SkeletonRowTableContent","_ref3","row","column","_Fragment","Array","from","keys","map","item","IndexTable","Row","position","toString","index","Cell","SkeletonBodyText","lines","SkeletonRowDesktop","_ref4","padding","borderBlockEndWidth","borderColor","wrap","gap","SkeletonThumbnail","SkeletonRowMobile","_ref2","number","mdDown","useBreakpoints","Layout","Card","SkeletonTabs","count","Divider","props","suppliers","setLoading","pageIndex","setPageIndex","pagesNumber","onViewSupplier","selectedResources","allResourcesSelected","handleSelectionChange","removeSelectedResources","useIndexResourceState","rowMarkup","createdAt","onClick","selected","includes","className","truncate","breakWord","variant","fontWeight","paddingInlineEnd","alignment","numeric","bulkActions","icon","DeleteIcon","destructive","Promise","all","forEach","delete","length","resourceName","singular","plural","itemCount","selectedItemsCount","onSelectionChange","headings","pagination","hasNext","onNext","hasPrevious","onPrevious","CustomEmptyState","SupplierPage","initTable","setInitTable","isActiveAddModal","setIsActiveAddModal","setSuppliers","pageSize","setPagesNumber","supplierData","setSupplierData","loadingModal","setLoadingModal","useCallback","get","then","data","metadata","totalPages","page","catch","Page","backAction","fullWidth","SkeletonIndexTable","SupplierDataTable","SupplierDetailModal","onDismissAddModal"],"sourceRoot":""}